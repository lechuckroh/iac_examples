AWSTemplateFormatVersion: "2010-09-09"
Description: Secure VPC

Parameters:
  AZ1:
    Description: AZ1 name
    Type: AWS::EC2::AvailabilityZone::Name
  AZ2:
    Description: AZ2 name
    Type: AWS::EC2::AvailabilityZone::Name
  VPCCIDR:
    Description: CIDR block for VPC
    Type: String
  PublicSubnetACIDR:
    Description: CIDR block for public subnet A
    Type: String
  PublicSubnetBCIDR:
    Description: CIDR block for public subnet B
    Type: String
  PrivateSubnetACIDR:
    Description: CIDR block for private subnet B
    Type: String
  PrivateSubnetBCIDR:
    Description: CIDR block for private subnet B
    Type: String

Resources:
  ##################
  # VPC
  ##################

  ExampleVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Example VPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ1
      CidrBlock: !Ref PublicSubnetACIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref ExampleVPC
      Tags:
        - Key: Name
          Value: Public Subnet A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ2
      CidrBlock: !Ref PublicSubnetBCIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref ExampleVPC
      Tags:
        - Key: Name
          Value: Public Subnet B

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ1
      CidrBlock: !Ref PrivateSubnetACIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref ExampleVPC
      Tags:
        - Key: Name
          Value: Private Subnet A

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ2
      CidrBlock: !Ref PrivateSubnetBCIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref ExampleVPC
      Tags:
        - Key: Name
          Value: Private Subnet B

  ##################
  # Internet Gateway
  ##################

  ExampleIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Example Internet Gateway

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: ExampleIGW
    Properties:
      VpcId: !Ref ExampleVPC
      InternetGatewayId: !Ref ExampleIGW

  ##################
  # Route Table
  ##################

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ExampleVPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref ExampleIGW
      DestinationCidrBlock: "0.0.0.0/0"

  PublicSubnetAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ExampleVPC
      Tags:
        - Key: Name
          Value: Private Route Table

  PrivateSubnetAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB

  ##################
  # ACL - public
  ##################

  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref ExampleVPC
      Tags:
        - Key: Name
          Value: Example Public ACL

  # allow outbound to everywhere
  NACLRulePublicEgressAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      Protocol: 6     # TCP
      PortRange:
        From: 1
        To: 65535
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref PublicNACL

  # allow outbound to VPC on all protocols
  NACLRulePublicEgressAllowAllToVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VPCCIDR
      Egress: true
      Protocol: -1
      RuleAction: allow
      RuleNumber: 200
      NetworkAclId: !Ref PublicNACL

  # allow inbound from everywhere to ephemeral ports (1024~)
  NACLRulePublicInressAllowEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref PublicNACL

  # allow inbound from everywhere on SSH port
  NACLRulePublicInressAllowSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      RuleNumber: 200
      NetworkAclId: !Ref PublicNACL

  # allow inbound from everywhere on HTTPS port
  NACLRulePublicInressAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: allow
      RuleNumber: 300
      NetworkAclId: !Ref PublicNACL

  # allow inbound from everywhere on HTTP port
  NACLRulePublicInressAllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: allow
      RuleNumber: 400
      NetworkAclId: !Ref PublicNACL

  # allow inbound from VPC on all protocol
  NACLRulePublicInressAllowFromVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VPCCIDR
      Protocol: -1
      RuleAction: allow
      RuleNumber: 500
      NetworkAclId: !Ref PublicNACL

  NACLAssociationPublicSubnetA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNACL
      SubnetId: !Ref PublicSubnetA

  NACLAssociationPublicSubnetB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNACL
      SubnetId: !Ref PublicSubnetB

  ##################
  # ACL - private
  ##################

  PrivateNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref ExampleVPC
      Tags:
        - Key: Name
          Value: Example Private ACL

  # allow all protocols from VPC range
  NACLRulePrivateInressAllowVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VPCCIDR
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref PrivateNACL

  # allow TCP responses from everywhere
  NACLRulePrivateInressAllowEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      RuleNumber: 200
      NetworkAclId: !Ref PrivateNACL

  # allow outbound traffic to everywhere, all protocols
  NACLRulePrivateEgressAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref PrivateNACL

  NACLAssociationPrivateSubnetA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateNACL
      SubnetId: !Ref PrivateSubnetA

  NACLAssociationPrivateSubnetB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateNACL
      SubnetId: !Ref PrivateSubnetB

Outputs:
  ExampleVPC:
    Value: !Ref ExampleVPC
  PublicSubnetA:
    Value: !Ref PublicSubnetA
  PublicSubnetB:
    Value: !Ref PublicSubnetB
  PublicRouteTable:
    Value: !Ref PublicRouteTable
  PrivateRouteTable:
    Value: !Ref PrivateRouteTable
  PrivateSubnetA:
    Value: !Ref PrivateSubnetA
  PrivateSubnetB:
    Value: !Ref PrivateSubnetB
